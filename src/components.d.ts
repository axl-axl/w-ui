/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyButton {
        "block"?: boolean;
        "disabled"?: boolean;
        "linkUrl"?: string;
        "loading"?: boolean;
        "onClick"?: Function;
        "target"?: string;
        "text": string;
        "type"?: 'default' | 'primary' | 'link' | 'text' | 'dashed';
    }
    interface MyCheckBox {
        "onChange": (v) => void;
        "text": string;
        "value": boolean;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface MyDatePick {
        "format": string;
        "onChange"?: (v: Date[] | Date) => void;
        "picker": 'day' | 'month';
        "value"?: string;
    }
    interface MyIcon {
        "class": string;
        "color": string;
        "name": string;
        "size": string;
    }
    interface MyInput {
        "editAble": boolean;
        "placeholder": string;
        "type": 'text' | 'textarea' | 'color' | 'checkbox' | 'date' | 'file';
        "value": string | number;
    }
    interface MyModal {
        "close"?: boolean;
        "footerclass"?: string;
        "headerTitle"?: string;
        "headerclass"?: string;
        "onCancel"?: Function;
        "onOk"?: (v: Object) => void;
        "visible": boolean;
    }
    interface MyPopover {
        "position"?: 't' | 'b' | 'l' | 'r' | 'tl' | 'tr' | 'bl' | 'br';
        "target"?: 'hover' | 'click';
        "visible"?: boolean;
    }
    interface MyRangePick {
        "onChange": (value: Date[]) => void;
        "value": string[];
    }
}
declare global {
    interface HTMLMyButtonElement extends Components.MyButton, HTMLStencilElement {
    }
    var HTMLMyButtonElement: {
        prototype: HTMLMyButtonElement;
        new (): HTMLMyButtonElement;
    };
    interface HTMLMyCheckBoxElement extends Components.MyCheckBox, HTMLStencilElement {
    }
    var HTMLMyCheckBoxElement: {
        prototype: HTMLMyCheckBoxElement;
        new (): HTMLMyCheckBoxElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLMyDatePickElement extends Components.MyDatePick, HTMLStencilElement {
    }
    var HTMLMyDatePickElement: {
        prototype: HTMLMyDatePickElement;
        new (): HTMLMyDatePickElement;
    };
    interface HTMLMyIconElement extends Components.MyIcon, HTMLStencilElement {
    }
    var HTMLMyIconElement: {
        prototype: HTMLMyIconElement;
        new (): HTMLMyIconElement;
    };
    interface HTMLMyInputElement extends Components.MyInput, HTMLStencilElement {
    }
    var HTMLMyInputElement: {
        prototype: HTMLMyInputElement;
        new (): HTMLMyInputElement;
    };
    interface HTMLMyModalElement extends Components.MyModal, HTMLStencilElement {
    }
    var HTMLMyModalElement: {
        prototype: HTMLMyModalElement;
        new (): HTMLMyModalElement;
    };
    interface HTMLMyPopoverElement extends Components.MyPopover, HTMLStencilElement {
    }
    var HTMLMyPopoverElement: {
        prototype: HTMLMyPopoverElement;
        new (): HTMLMyPopoverElement;
    };
    interface HTMLMyRangePickElement extends Components.MyRangePick, HTMLStencilElement {
    }
    var HTMLMyRangePickElement: {
        prototype: HTMLMyRangePickElement;
        new (): HTMLMyRangePickElement;
    };
    interface HTMLElementTagNameMap {
        "my-button": HTMLMyButtonElement;
        "my-check-box": HTMLMyCheckBoxElement;
        "my-component": HTMLMyComponentElement;
        "my-date-pick": HTMLMyDatePickElement;
        "my-icon": HTMLMyIconElement;
        "my-input": HTMLMyInputElement;
        "my-modal": HTMLMyModalElement;
        "my-popover": HTMLMyPopoverElement;
        "my-range-pick": HTMLMyRangePickElement;
    }
}
declare namespace LocalJSX {
    interface MyButton {
        "block"?: boolean;
        "disabled"?: boolean;
        "linkUrl"?: string;
        "loading"?: boolean;
        "onClick"?: Function;
        "target"?: string;
        "text"?: string;
        "type"?: 'default' | 'primary' | 'link' | 'text' | 'dashed';
    }
    interface MyCheckBox {
        "onChange"?: (v) => void;
        "text"?: string;
        "value"?: boolean;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface MyDatePick {
        "format"?: string;
        "onChange"?: (v: Date[] | Date) => void;
        "picker"?: 'day' | 'month';
        "value"?: string;
    }
    interface MyIcon {
        "class"?: string;
        "color"?: string;
        "name"?: string;
        "size"?: string;
    }
    interface MyInput {
        "editAble"?: boolean;
        "placeholder"?: string;
        "type"?: 'text' | 'textarea' | 'color' | 'checkbox' | 'date' | 'file';
        "value"?: string | number;
    }
    interface MyModal {
        "close"?: boolean;
        "footerclass"?: string;
        "headerTitle"?: string;
        "headerclass"?: string;
        "onCancel"?: Function;
        "onOk"?: (v: Object) => void;
        "visible"?: boolean;
    }
    interface MyPopover {
        "position"?: 't' | 'b' | 'l' | 'r' | 'tl' | 'tr' | 'bl' | 'br';
        "target"?: 'hover' | 'click';
        "visible"?: boolean;
    }
    interface MyRangePick {
        "onChange"?: (value: Date[]) => void;
        "value"?: string[];
    }
    interface IntrinsicElements {
        "my-button": MyButton;
        "my-check-box": MyCheckBox;
        "my-component": MyComponent;
        "my-date-pick": MyDatePick;
        "my-icon": MyIcon;
        "my-input": MyInput;
        "my-modal": MyModal;
        "my-popover": MyPopover;
        "my-range-pick": MyRangePick;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-button": LocalJSX.MyButton & JSXBase.HTMLAttributes<HTMLMyButtonElement>;
            "my-check-box": LocalJSX.MyCheckBox & JSXBase.HTMLAttributes<HTMLMyCheckBoxElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "my-date-pick": LocalJSX.MyDatePick & JSXBase.HTMLAttributes<HTMLMyDatePickElement>;
            "my-icon": LocalJSX.MyIcon & JSXBase.HTMLAttributes<HTMLMyIconElement>;
            "my-input": LocalJSX.MyInput & JSXBase.HTMLAttributes<HTMLMyInputElement>;
            "my-modal": LocalJSX.MyModal & JSXBase.HTMLAttributes<HTMLMyModalElement>;
            "my-popover": LocalJSX.MyPopover & JSXBase.HTMLAttributes<HTMLMyPopoverElement>;
            "my-range-pick": LocalJSX.MyRangePick & JSXBase.HTMLAttributes<HTMLMyRangePickElement>;
        }
    }
}
